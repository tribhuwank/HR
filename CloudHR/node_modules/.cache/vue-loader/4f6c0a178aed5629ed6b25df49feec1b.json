{"remainingRequest":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Applicatons\\CloudHR\\CloudHR\\src\\views\\admin\\user\\editUser.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\src\\views\\admin\\user\\editUser.vue","mtime":1551346676905},{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getRoleList } from '@/api/table';\nimport { editUser } from '@/api/user';\nexport default {\n    data() {\n\n        var validatePass = (rule, value, callback) => {\n            if (value === '') {\n                callback(new Error('Please input the password'));\n            } else {\n                if (this.ruleForm.checkPass !== '') {\n                    this.$refs.ruleForm.validateField('checkPass');\n                }\n                callback();\n            }\n        };\n        var validatePass2 = (rule, value, callback) => {\n            if (value === '') {\n                callback(new Error('Please input the password again'));\n            } else if (value !== this.ruleForm.password) {\n                callback(new Error('Two inputs don\\'t match!'));\n            } else {\n                callback();\n            }\n        };\n        return {\n            ruleForm: {\n                id: '',\n                name: '',\n                username: '',\n                password: '',\n                checkPass: '',\n                roleId: ''\n\n            },\n            roles: [],\n            rules: {\n                roleId: [\n                    { required: true, message: 'Please select at least one Role', pattern: /.+/, trigger: 'change' }   \n                ],\n                name: [\n                    { required: true, message: 'Please input Role Name', trigger: 'blur' }\n                ],\n                username: [\n                    { required: true, message: 'Please input User Name', trigger: 'blur' }\n                ],\n                password: [\n                    { validator: validatePass, trigger: 'blur' }\n                ],\n                checkPass: [\n                    { validator: validatePass2, trigger: 'blur' }\n                ]\n            }\n        };\n    },\n\n    mounted() {\n        this.getRoles();\n    },\n    created() {\n        this.ruleForm = this.$route.params.row;\n        console.log(this.$route.params.row);\n    },\n    methods: {\n        getRoles: function () {\n            this.loading = true;\n            return new Promise((resolve, reject) => {\n            getRoleList().then((res) => {\n                this.roles = res.result;\n                this.loading = false;\n                    resolve()\n                }).catch(error => {\n                    reject(error)\n                })\n            })   \n        },\n\n        submitForm(formName) {\n            this.$refs[formName].validate((valid) => {\n                if (valid) {\n                   \n                    this.loading = true;\n                    //NProgress.start();\n\n                    var userParams = { Id: this.ruleForm.id, Name: this.ruleForm.name, UserName: this.ruleForm.username, Password: this.ruleForm.password, RoleId: this.ruleForm.roleId };\n                    return new Promise((resolve, reject) => {\n\n                    editUser(userParams).then((res) => {\n                        this.$router.back();\n                        this.loading = false;\n                        this.$message({\n                            type: 'success',\n                            message: 'User Edit completed'\n                        });\n                        resolve()\n                        }).catch(error => {\n                            reject(error)\n                        })\n                    })   \n                } else {\n                    this.$message({\n                        type: 'info',\n                        message: 'User Edit Canceled' \n                    });\n                    return false;\n                }\n            });\n        },\n        resetForm(formName) {\n            this.$refs[formName].resetFields();\n        },\n        handleBack() {\n            this.$router.back();\n        }\n    }\n    \n}\n",{"version":3,"sources":["editUser.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"editUser.vue","sourceRoot":"src\\views\\admin\\user","sourcesContent":["<template>\r\n    <div class=\"app-container\">\r\n        <el-row>\r\n            <el-button round @click=\"handleBack()\" style=\"margin:20px;float:right\">BACK TO USERS</el-button>\r\n        </el-row>\r\n        <el-form :model=\"ruleForm\" :rules=\"rules\" ref=\"ruleForm\" label-width=\"120px\">\r\n            <el-form-item label=\"Name\" prop=\"name\">\r\n                <el-input v-model=\"ruleForm.name\"></el-input>\r\n            </el-form-item>\r\n\r\n            <el-form-item label=\"User Name\" prop=\"username\" placeholder=\"User Name\">\r\n                <el-input v-model=\"ruleForm.username\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"Role\" prop=\"roleId\">\r\n                <el-select v-model=\"ruleForm.roleId\" placeholder=\"Role\">\r\n                    <el-option v-for=\"item in roles\"\r\n                               :key=\"item.id\"\r\n                               :label=\"item.name\"\r\n                               :value=\"item.id\">\r\n                    </el-option>\r\n\r\n                </el-select>\r\n            </el-form-item>\r\n            <el-form-item label=\"Password\" prop=\"password\" placeholder=\"Password\">\r\n                <el-input type=\"password\" v-model=\"ruleForm.password\" autocomplete=\"off\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item label=\"Confirm\" prop=\"checkPass\" placeholder=\"Confirm Password\">\r\n                <el-input type=\"password\" v-model=\"ruleForm.checkPass\" autocomplete=\"off\"></el-input>\r\n            </el-form-item>\r\n            <el-form-item>\r\n                <el-button type=\"primary\" @click=\"submitForm('ruleForm')\">Save</el-button>\r\n                <el-button @click=\"resetForm('ruleForm')\">Reset</el-button>\r\n            </el-form-item>\r\n        </el-form>\r\n     </div>\r\n</template>\r\n<script>    \r\n    import { getRoleList } from '@/api/table';\r\n    import { editUser } from '@/api/user';\r\n    export default {\r\n        data() {\r\n\r\n            var validatePass = (rule, value, callback) => {\r\n                if (value === '') {\r\n                    callback(new Error('Please input the password'));\r\n                } else {\r\n                    if (this.ruleForm.checkPass !== '') {\r\n                        this.$refs.ruleForm.validateField('checkPass');\r\n                    }\r\n                    callback();\r\n                }\r\n            };\r\n            var validatePass2 = (rule, value, callback) => {\r\n                if (value === '') {\r\n                    callback(new Error('Please input the password again'));\r\n                } else if (value !== this.ruleForm.password) {\r\n                    callback(new Error('Two inputs don\\'t match!'));\r\n                } else {\r\n                    callback();\r\n                }\r\n            };\r\n            return {\r\n                ruleForm: {\r\n                    id: '',\r\n                    name: '',\r\n                    username: '',\r\n                    password: '',\r\n                    checkPass: '',\r\n                    roleId: ''\r\n\r\n                },\r\n                roles: [],\r\n                rules: {\r\n                    roleId: [\r\n                        { required: true, message: 'Please select at least one Role', pattern: /.+/, trigger: 'change' }   \r\n                    ],\r\n                    name: [\r\n                        { required: true, message: 'Please input Role Name', trigger: 'blur' }\r\n                    ],\r\n                    username: [\r\n                        { required: true, message: 'Please input User Name', trigger: 'blur' }\r\n                    ],\r\n                    password: [\r\n                        { validator: validatePass, trigger: 'blur' }\r\n                    ],\r\n                    checkPass: [\r\n                        { validator: validatePass2, trigger: 'blur' }\r\n                    ]\r\n                }\r\n            };\r\n        },\r\n\r\n        mounted() {\r\n            this.getRoles();\r\n        },\r\n        created() {\r\n            this.ruleForm = this.$route.params.row;\r\n            console.log(this.$route.params.row);\r\n        },\r\n        methods: {\r\n            getRoles: function () {\r\n                this.loading = true;\r\n                return new Promise((resolve, reject) => {\r\n                getRoleList().then((res) => {\r\n                    this.roles = res.result;\r\n                    this.loading = false;\r\n                        resolve()\r\n                    }).catch(error => {\r\n                        reject(error)\r\n                    })\r\n                })   \r\n            },\r\n\r\n            submitForm(formName) {\r\n                this.$refs[formName].validate((valid) => {\r\n                    if (valid) {\r\n                       \r\n                        this.loading = true;\r\n                        //NProgress.start();\r\n\r\n                        var userParams = { Id: this.ruleForm.id, Name: this.ruleForm.name, UserName: this.ruleForm.username, Password: this.ruleForm.password, RoleId: this.ruleForm.roleId };\r\n                        return new Promise((resolve, reject) => {\r\n\r\n                        editUser(userParams).then((res) => {\r\n                            this.$router.back();\r\n                            this.loading = false;\r\n                            this.$message({\r\n                                type: 'success',\r\n                                message: 'User Edit completed'\r\n                            });\r\n                            resolve()\r\n                            }).catch(error => {\r\n                                reject(error)\r\n                            })\r\n                        })   \r\n                    } else {\r\n                        this.$message({\r\n                            type: 'info',\r\n                            message: 'User Edit Canceled' \r\n                        });\r\n                        return false;\r\n                    }\r\n                });\r\n            },\r\n            resetForm(formName) {\r\n                this.$refs[formName].resetFields();\r\n            },\r\n            handleBack() {\r\n                this.$router.back();\r\n            }\r\n        }\r\n        \r\n    }\r\n</script>\r\n\r\n\r\n"]}]}