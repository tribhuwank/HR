{"remainingRequest":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Applicatons\\CloudHR\\CloudHR\\src\\views\\admin\\user\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\src\\views\\admin\\user\\index.vue","mtime":1548775726888},{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getUserList, getRoleList } from '@/api/table';\nimport { deleteUser } from '@/api/user';\n  \nexport default {\n    data() {\n        var validatePass = (rule, value, callback) => {\n            if (value === '') {\n                callback(new Error('Please input the password'));\n            } else {\n                if (this.ruleForm.checkPass !== '') {\n                    this.$refs.ruleForm.validateField('checkPass');\n                }\n                callback();\n            }\n        };\n        var validatePass2 = (rule, value, callback) => {\n            if (value === '') {\n                callback(new Error('Please input the password again'));\n            } else if (value !== this.ruleForm.password) {\n                callback(new Error('Two inputs don\\'t match!'));\n            } else {\n                callback();\n            }\n        };\n       \n        return {\n            userstableData: [], \n            roles:[],\n            loading: false,\n            search: '',\n            ruleForm: {\n                name: '',\n                userName: '',\n                password: '',\n                checkPass: '',\n                roleId: '',\n                id: ''\n            }\n        }\n    },\n    methods: {\n        handleSizeChange(val) {\n            this.getUsers(1, val);\n\n        },\n        handleCurrentChange(val) {\n            this.getUsers(val, null);\n        },\n        indexMethod(index) {\n            return index + 1;\n        },\n        getUsers: function (page,pageSize) {\n            this.loading = true;\n            var params = { page: page, pageSize: pageSize }\n            return new Promise((resolve, reject) => {\n            getUserList(params).then((res) => {\n                this.userstableData = res.result;\n                this.loading = false;\n                    resolve()\n                }).catch(error => {\n                    reject(error)\n                })\n            })\n        },\n        getRoles: function () {\n            this.loading = true;\n            return new Promise((resolve, reject) => {\n                getRoleList().then((res) => {\n                    this.roles = res.result;\n                    this.loading = false;\n                    resolve()\n                }).catch(error => {\n                    reject(error)\n                })\n            })\n        },\n      \n        indexMethod(index) {\n            return index +1;\n        },\n        handleEdit(index, row) {\n           \n            this.$router.push({ path: 'user-edit', name: 'user-edit', params: { row: row } });             \n        },\n        handleDelete(index, row) {\n            this.$confirm('This will permanently delete the User. Continue?', 'Warning', {\n                confirmButtonText: 'OK',\n                cancelButtonText: 'Cancel',\n                type: 'warning'\n            }).then(() => {\n                this.loading = true;\n                var userParams = { Id: row.id, Name: row.name, UserName: row.username, Password: row.password, RoleId: row.roleId };\n                \n                deleteUser(userParams).then((res) => {\n                    this.loading = false;\n                    this.getUsers();\n                    this.$message({\n                        type: 'success',\n                        message: 'Delete completed'\n                    });\n                }).catch((error) => {\n                    this.$message({\n                        type: 'info',\n                        message: 'Delete canceled ' + error \n                    });\n                });\n\n            }).catch((error) => {\n                this.$message({\n                    type: 'info',\n                    message: 'Delete canceled ' + error \n                });\n            });\n        },\n        handleAdd() { \n            this.$router.push({ path: 'user-add', name: 'user-add', meta: { requiresAuth: true, adminAuth: true, operatorAuth: false } });             \n        },\n        handleRoles() {\n            this.$router.push({ path: 'role' });\n        },\n       \n    },\n    created() {            \n    },\n    mounted() {\n        this.getUsers(1,5);\n        this.getRoles();\n    }\n};\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"index.vue","sourceRoot":"src\\views\\admin\\user","sourcesContent":["<template>\r\n    <div class=\"app-container\">\r\n        <el-button round @click=\"handleRoles()\" style=\"margin:20px;float:right\">ROLES</el-button>\r\n        <el-button round @click=\"handleAdd()\" style=\"margin:20px;float:right\">ADD USER</el-button>\r\n\r\n        <template>\r\n            <el-table :data=\"userstableData.results\" v-loading=\"loading\"\r\n                      style=\"width: 100%\">\r\n                <el-table-column type=\"index\"\r\n                                 :index=\"indexMethod\">\r\n                </el-table-column>\r\n                <el-table-column prop=\"name\" sortable\r\n                                 label=\"Name\"\r\n                                 width=\"200\">\r\n                </el-table-column>\r\n                <el-table-column prop=\"username\" sortable\r\n                                 label=\"Username\">\r\n                </el-table-column>\r\n                <el-table-column prop=\"role.name\" sortable\r\n                                 label=\"Role\">\r\n\r\n                </el-table-column>\r\n                <el-table-column align=\"right\">\r\n\r\n                    <template slot-scope=\"scope\">\r\n                        <el-button size=\"mini\"\r\n                                   @click=\"handleEdit(scope.$index, scope.row)\">Edit</el-button>\r\n                        <el-button size=\"mini\"\r\n                                   type=\"danger\"\r\n                                   @click=\"handleDelete(scope.$index, scope.row)\">Delete</el-button>\r\n                    </template>\r\n                </el-table-column>\r\n            </el-table>\r\n            <div class=\"block\" style=\"text-align: center;\">\r\n                <span class=\"demonstration\"></span>\r\n                <el-pagination v-on:size-change=\"handleSizeChange\"\r\n                               v-on:current-change=\"handleCurrentChange\"\r\n                               :current-page.sync=\"userstableData.currentPage\"\r\n                               :page-sizes=\"[5,10, 20, 50, 100]\"\r\n                               :page-size=\"userstableData.pageSize\"\r\n                               layout=\"total, sizes, prev, pager, next, jumper\"\r\n                               :total=\"userstableData.rowCount\">\r\n                </el-pagination>\r\n            </div>\r\n\r\n        </template>\r\n     </div>\r\n</template>\r\n<script>\r\n    import { getUserList, getRoleList } from '@/api/table';\r\n    import { deleteUser } from '@/api/user';\r\n      \r\n    export default {\r\n        data() {\r\n            var validatePass = (rule, value, callback) => {\r\n                if (value === '') {\r\n                    callback(new Error('Please input the password'));\r\n                } else {\r\n                    if (this.ruleForm.checkPass !== '') {\r\n                        this.$refs.ruleForm.validateField('checkPass');\r\n                    }\r\n                    callback();\r\n                }\r\n            };\r\n            var validatePass2 = (rule, value, callback) => {\r\n                if (value === '') {\r\n                    callback(new Error('Please input the password again'));\r\n                } else if (value !== this.ruleForm.password) {\r\n                    callback(new Error('Two inputs don\\'t match!'));\r\n                } else {\r\n                    callback();\r\n                }\r\n            };\r\n           \r\n            return {\r\n                userstableData: [], \r\n                roles:[],\r\n                loading: false,\r\n                search: '',\r\n                ruleForm: {\r\n                    name: '',\r\n                    userName: '',\r\n                    password: '',\r\n                    checkPass: '',\r\n                    roleId: '',\r\n                    id: ''\r\n                }\r\n            }\r\n        },\r\n        methods: {\r\n            handleSizeChange(val) {\r\n                this.getUsers(1, val);\r\n\r\n            },\r\n            handleCurrentChange(val) {\r\n                this.getUsers(val, null);\r\n            },\r\n            indexMethod(index) {\r\n                return index + 1;\r\n            },\r\n            getUsers: function (page,pageSize) {\r\n                this.loading = true;\r\n                var params = { page: page, pageSize: pageSize }\r\n                return new Promise((resolve, reject) => {\r\n                getUserList(params).then((res) => {\r\n                    this.userstableData = res.result;\r\n                    this.loading = false;\r\n                        resolve()\r\n                    }).catch(error => {\r\n                        reject(error)\r\n                    })\r\n                })\r\n            },\r\n            getRoles: function () {\r\n                this.loading = true;\r\n                return new Promise((resolve, reject) => {\r\n                    getRoleList().then((res) => {\r\n                        this.roles = res.result;\r\n                        this.loading = false;\r\n                        resolve()\r\n                    }).catch(error => {\r\n                        reject(error)\r\n                    })\r\n                })\r\n            },\r\n          \r\n            indexMethod(index) {\r\n                return index +1;\r\n            },\r\n            handleEdit(index, row) {\r\n               \r\n                this.$router.push({ path: 'user-edit', name: 'user-edit', params: { row: row } });             \r\n            },\r\n            handleDelete(index, row) {\r\n                this.$confirm('This will permanently delete the User. Continue?', 'Warning', {\r\n                    confirmButtonText: 'OK',\r\n                    cancelButtonText: 'Cancel',\r\n                    type: 'warning'\r\n                }).then(() => {\r\n                    this.loading = true;\r\n                    var userParams = { Id: row.id, Name: row.name, UserName: row.username, Password: row.password, RoleId: row.roleId };\r\n                    \r\n                    deleteUser(userParams).then((res) => {\r\n                        this.loading = false;\r\n                        this.getUsers();\r\n                        this.$message({\r\n                            type: 'success',\r\n                            message: 'Delete completed'\r\n                        });\r\n                    }).catch((error) => {\r\n                        this.$message({\r\n                            type: 'info',\r\n                            message: 'Delete canceled ' + error \r\n                        });\r\n                    });\r\n\r\n                }).catch((error) => {\r\n                    this.$message({\r\n                        type: 'info',\r\n                        message: 'Delete canceled ' + error \r\n                    });\r\n                });\r\n            },\r\n            handleAdd() { \r\n                this.$router.push({ path: 'user-add', name: 'user-add', meta: { requiresAuth: true, adminAuth: true, operatorAuth: false } });             \r\n            },\r\n            handleRoles() {\r\n                this.$router.push({ path: 'role' });\r\n            },\r\n           \r\n        },\r\n        created() {            \r\n        },\r\n        mounted() {\r\n            this.getUsers(1,5);\r\n            this.getRoles();\r\n        }\r\n    };\r\n</script>\r\n<style scoped>\r\n    \r\n</style>"]}]}