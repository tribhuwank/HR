{"remainingRequest":"E:\\Applicatons\\TestProjects\\vue-cli3.0-vueadmin\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Applicatons\\TestProjects\\vue-cli3.0-vueadmin\\src\\views\\admin\\layout\\components\\Sidebar\\SidebarItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Applicatons\\TestProjects\\vue-cli3.0-vueadmin\\src\\views\\admin\\layout\\components\\Sidebar\\SidebarItem.vue","mtime":1546537358184},{"path":"E:\\Applicatons\\TestProjects\\vue-cli3.0-vueadmin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Applicatons\\TestProjects\\vue-cli3.0-vueadmin\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\Applicatons\\TestProjects\\vue-cli3.0-vueadmin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Applicatons\\TestProjects\\vue-cli3.0-vueadmin\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport path from \"path\";\r\n\r\nexport default {\r\n    name: \"SidebarItem\",\r\n    props: {\r\n        // route配置json\r\n        item: {\r\n            type: Object,\r\n            required: true\r\n        },\r\n        isNest: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        basePath: {\r\n            type: String,\r\n            default: \"\"\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            onlyOneChild: null\r\n        };\r\n    },\r\n    methods: {\r\n        hasOneShowingChild(children) {\r\n            const showingChildren = children.filter(item => {\r\n                if (item.hidden) {\r\n                    return false;\r\n                } else {\r\n                    // temp set(will be used if only has one showing child )\r\n                    this.onlyOneChild = item;\r\n                    return true;\r\n                }\r\n            });\r\n            if (showingChildren.length === 1) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        resolvePath(...paths) {\r\n            return path.resolve(this.basePath, ...paths);\r\n        }\r\n    }\r\n};\r\n",{"version":3,"sources":["SidebarItem.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SidebarItem.vue","sourceRoot":"src\\views\\admin\\layout\\components\\Sidebar","sourcesContent":["<template>\r\n  <div v-if=\"!item.hidden&&item.children\" class=\"menu-wrapper\">\r\n\r\n      <router-link v-if=\"hasOneShowingChild(item.children) && !onlyOneChild.children&&!item.alwaysShow\" :to=\"resolvePath(onlyOneChild.path)\">\r\n        <el-menu-item :index=\"resolvePath(onlyOneChild.path)\" :class=\"{'submenu-title-noDropdown':!isNest}\">\r\n          <!-- <svg-icon v-if=\"onlyOneChild.meta&&onlyOneChild.meta.icon\" :icon-class=\"onlyOneChild.meta.icon\"></svg-icon> -->\r\n          <i class=\"fontcontainer\">\r\n              <span class=\"iconfont\" v-if=\"onlyOneChild.meta&&onlyOneChild.meta.icon\" :class=\"onlyOneChild.meta.icon\"></span>\r\n          </i>\r\n          <span v-if=\"onlyOneChild.meta&&onlyOneChild.meta.title\" slot=\"title\">{{onlyOneChild.meta.title}}</span>\r\n        </el-menu-item>\r\n      </router-link>\r\n\r\n      <el-submenu v-else :index=\"item.name||item.path\">\r\n        <template slot=\"title\">\r\n          <!-- <svg-icon v-if=\"item.meta&&item.meta.icon\" :icon-class=\"item.meta.icon\"></svg-icon> -->\r\n          <i class=\"fontcontainer\">\r\n              <span class=\"iconfont\" v-if=\"item.meta&&item.meta.icon\" :class=\"item.meta.icon\"></span>\r\n          </i>\r\n          <span v-if=\"item.meta&&item.meta.title\" slot=\"title\">{{item.meta.title}}</span>\r\n        </template>\r\n\r\n        <template v-for=\"child in item.children\" v-if=\"!child.hidden\">\r\n          <sidebar-item :is-nest=\"true\" class=\"nest-menu\" v-if=\"child.children&&child.children.length>0\" :item=\"child\" :key=\"child.path\" :base-path=\"resolvePath(child.path)\"></sidebar-item>\r\n\r\n          <router-link v-else :to=\"resolvePath(child.path)\" :key=\"child.name\">\r\n            <el-menu-item :index=\"resolvePath(child.path)\">\r\n              <!-- <svg-icon v-if=\"child.meta&&child.meta.icon\" :icon-class=\"child.meta.icon\"></svg-icon> -->\r\n              <i class=\"fontcontainer\">\r\n                 <span class=\"iconfont\" v-if=\"child.meta&&child.meta.icon\" :class=\"child.meta.icon\"></span>\r\n              </i>\r\n              <span v-if=\"child.meta&&child.meta.title\" slot=\"title\">{{child.meta.title}}</span>\r\n            </el-menu-item>\r\n          </router-link>\r\n        </template>\r\n      </el-submenu>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport path from \"path\";\r\n\r\nexport default {\r\n    name: \"SidebarItem\",\r\n    props: {\r\n        // route配置json\r\n        item: {\r\n            type: Object,\r\n            required: true\r\n        },\r\n        isNest: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        basePath: {\r\n            type: String,\r\n            default: \"\"\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            onlyOneChild: null\r\n        };\r\n    },\r\n    methods: {\r\n        hasOneShowingChild(children) {\r\n            const showingChildren = children.filter(item => {\r\n                if (item.hidden) {\r\n                    return false;\r\n                } else {\r\n                    // temp set(will be used if only has one showing child )\r\n                    this.onlyOneChild = item;\r\n                    return true;\r\n                }\r\n            });\r\n            if (showingChildren.length === 1) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        resolvePath(...paths) {\r\n            return path.resolve(this.basePath, ...paths);\r\n        }\r\n    }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.fontcontainer{\r\n    padding-right:10px;\r\n}\r\n</style>\r\n\r\n"]}]}