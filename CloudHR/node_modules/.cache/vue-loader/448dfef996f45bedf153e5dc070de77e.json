{"remainingRequest":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Applicatons\\CloudHR\\CloudHR\\src\\views\\employee\\DependentDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\src\\views\\employee\\DependentDetail.vue","mtime":1557856646883},{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n     import { getCastList, getGenderList, getMaritalStatusList,getReligionsList,getLitracyList,\n    getHealthStatusList, getCountryList, getProvinceList, getDistrictList, getMunVdcList, getWardList } from '@/api/table';\n    import { addEmployee, deleteEmployee } from '@/api/employee';\n    import { getUserByPerson } from '@/api/user';\nimport { Script } from 'vm';\n    export default {\n        props:['ruleForm.employee.dependentPersons'],\n        data() {\n\n            return {\n                index: '',\n                ruleForm: {                    \n                    person: {\n                        id: null,\n                        firstName: '',\n                        middleName: '',\n                        lastName: '',\n                        dob: null,\n                        genderId: null,\n                        religionId: null,\n                        castId: null,\n                        email: '',\n                        phone1: '',\n                        phone2: '',\n                        permanentAddressId: '',\n                        permanentAddress: {\n                            id: null,\n                            addressTypeId: 1,\n                            countryId: null,\n                            provinceId: null,\n                            districtId: null,\n                            munVdcId: null,\n                            addressLine1: '',\n                            addressLine2: '',\n                            wardNo: null,\n                            pinCode: null,\n                            houseNo: null\n                        },\n                        temporaryAddressId: '',\n                        temporaryAddress: {\n                            id: null,\n                            addressTypeId: 2,\n                            countryId: null,\n                            provinceId: null,\n                            districtId: null,\n                            munVdcId: null,\n                            addressLine1: '',\n                            addressLine2: '',\n                            wardNo: null,\n                            pinCode: null,\n                            houseNo: null\n                        },\n                        maritalStatusId: null,\n                        healthStatusId: null,\n                        identityTypeId: null,\n                        identityNumber: null,\n                        identityIssueDate: null,\n                        identityIssuePlace: null,\n                        litracyId: null,\n                        educationId: null,\n                        eduInstitutionTypeId: null\n\n                    },\n                    religions: [],\n                    casts: [],\n                    addressTypes: [],\n                    countrys1: [],\n                    countrys2: [],\n                    provinces1: [],\n                    provinces2: [],\n                    districts1: [],\n                    districts2: [],\n                    munVdcs1: [],\n                    munVdcs2: [],\n                    wards1: [],\n                    wards2: [],\n                    maritalStatuses: [],\n                    identityTypes: [],\n                    litracys: [],\n                    educations: [],\n                    eduInstitutionTypes: [],\n\n                }\n            }\n        },\n            //created() {\n\n            //},\n            mounted() {\n                this.getGenders();\n                this.getMaritalStatus();\n                this.getReligions();\n                this.getCasts();\n                this.getLitracys();\n                this.getHealthStatuses();\n                this.getCountrys1();\n                this.getCountrys2();\n                this.getProvinces1();\n                this.getProvinces2();\n\n            },\n        methods: {\n            getCountrys1: function () {\n                return new Promise((resolve, reject) => {\n                    this.loading = true;\n                    getCountryList().then((res) => {\n                        this.countrys1 = res.result;\n                        this.loading = false;\n                        resolve()\n                    }).catch(error => {\n                        reject(error)\n                    })\n                })\n            },\n            getCountrys2: function () {\n                this.loading = true;\n                return new Promise((resolve, reject) => {\n                    getCountryList().then((res) => {\n                        this.countrys2 = res.result;\n                        this.loading = false;\n                        resolve()\n                    }).catch(error => {\n                        reject(error)\n                    })\n                })\n            },\n            getProvinces1: function () {\n                this.loading = true;\n                return new Promise((resolve, reject) => {\n                    getProvinceList().then((res) => {\n                        this.provinces1 = res.result;\n                        this.loading = false;\n                        resolve()\n                    }).catch(error => {\n                        reject(error)\n                    })\n                })\n            },\n            getProvinces2: function () {\n                this.loading = true;\n                return new Promise((resolve, reject) => {\n                    getProvinceList().then((res) => {\n                        this.provinces2 = res.result;\n                        this.loading = false;\n                        resolve()\n                    }).catch(error => {\n                        reject(error)\n                    })\n                })\n            },\n            getDistricts1: function (provinceId) {\n                this.loading = true;\n                return new Promise((resolve, reject) => {\n                    var params = { provinceId: provinceId }\n                    getDistrictList(params).then((res) => {\n                        this.districts1 = res.result;\n                        this.loading = false;\n                        resolve()\n                    }).catch(error => {\n                        reject(error)\n                    })\n                })\n            },\n            getDistricts2: function (provinceId) {\n                this.loading = true;\n                return new Promise((resolve, reject) => {\n                    var params = { provinceId: provinceId }\n                    getDistrictList(params).then((res) => {\n                        this.districts2 = res.result;\n                        this.loading = false;\n                        resolve()\n                    }).catch(error => {\n                        reject(error)\n                    })\n                })\n            },\n\n\n            getMunVdcs1: function (districtId) {\n                this.loading = true;\n                return new Promise((resolve, reject) => {\n                    var params = { districtId: districtId }\n                    getMunVdcList(params).then((res) => {\n                        this.munVdcs1 = res.result;\n                        this.loading = false;\n                        resolve()\n                    }).catch(error => {\n                        reject(error)\n                    })\n                })\n            },\n            getMunVdcs2: function (districtId) {\n                this.loading = true;\n                return new Promise((resolve, reject) => {\n                    var params = { districtId: districtId }\n                    getMunVdcList(params).then((res) => {\n                        this.munVdcs2 = res.result;\n                        this.loading = false;\n                        resolve()\n                    }).catch(error => {\n                        reject(error)\n                    })\n                })\n            },\n            getWards1: function (munVdcId) {\n                this.loading = true;\n                return new Promise((resolve, reject) => {\n                    var params = { munVdcId: munVdcId }\n                    getWardList(params).then((res) => {\n                        this.wards1 = res.result;\n                        this.loading = false;\n                        resolve()\n                    }).catch(error => {\n                        reject(error)\n                    })\n                })\n            },\n            getWards2: function (munVdcId) {\n                this.loading = true;\n                return new Promise((resolve, reject) => {\n                    var params = { munVdcId: munVdcId }\n                    getWardList(params).then((res) => {\n                        this.wards2 = res.result;\n                        this.loading = false;\n                        resolve()\n                    }).catch(error => {\n                        reject(error)\n                    })\n                })\n            },\n            getLitracys: function () {\n                this.loading = true;\n                return new Promise((resolve, reject) => {\n                    getLitracyList().then((res) => {\n                        this.litracys = res.result;\n                        this.loading = false;\n                        resolve()\n                    }).catch(error => {\n                        reject(error)\n                    })\n                })\n            },\n            getHealthStatuses: function () {\n                this.loading = true;\n                return new Promise((resolve, reject) => {\n                    getHealthStatusList().then((res) => {\n                        this.healthStatuses = res.result;\n                        this.loading = false;\n                        resolve()\n                    }).catch(error => {\n                        reject(error)\n                    })\n                })\n            },\n            getGenders: function () {\n                this.loading = true;\n                return new Promise((resolve, reject) => {\n                    getGenderList().then((res) => {\n                        this.genders = res.result;\n                        this.loading = false;\n                        resolve()\n                    }).catch(error => {\n                        reject(error)\n                    })\n                })\n            },\n            getCasts: function () {\n                this.loading = true;\n                return new Promise((resolve, reject) => {\n                    getCastList().then((res) => {\n                        this.casts = res.result;\n                        this.loading = false;\n                        resolve()\n                    }).catch(error => {\n                        reject(error)\n                    })\n                })\n            },\n            getMaritalStatus: function () {\n                this.loading = true;\n                return new Promise((resolve, reject) => {\n                    getMaritalStatusList().then((res) => {\n                        this.maritalStatuses = res.result;\n                        this.loading = false;\n                        resolve()\n                    }).catch(error => {\n                        reject(error)\n                    })\n                })\n            },\n            getReligions: function () {\n                this.loading = true;\n                return new Promise((resolve, reject) => {\n                    getReligionsList().then((res) => {\n                        this.religions = res.result;\n                        this.loading = false;\n                        resolve()\n                    }).catch(error => {\n                        reject(error)\n                    })\n                })\n            },\n            submitForm(formName) {\n                this.$refs[formName].validate((valid) => {\n                    if (valid) {\n                        this.loading = true;\n                        return new Promise((resolve, reject) => {\n                            var employeeParams = { Id: this.ruleForm.id, Name: this.ruleForm.name, UserName: this.ruleForm.username, Password: this.ruleForm.password, RoleId: this.ruleForm.roleId };\n                            editEmployee(employeeParams).then((res) => {\n                                this.$router.back();\n                                this.loading = false;\n                                resolve()\n                                this.$message({\n                                    type: 'success',\n                                    message: 'Employee Edit completed'\n                                })\n                            }).catch(error => {\n                                reject(error)\n                            })\n                        })\n                    } else {\n                        this.$message({\n                            type: 'info',\n                            message: 'Employee Edit Canceled'\n                        });\n                        return false;\n                    }\n                })\n            },\n            resetForm(formName) {\n                this.$router.back();\n                //this.$refs[formName].resetFields();\n            },\n            handleBack() {\n                this.$router.back();\n            }\n        }\n        \n    }\n",{"version":3,"sources":["DependentDetail.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"DependentDetail.vue","sourceRoot":"src\\views\\employee","sourcesContent":["<template>\r\n    <section style=\"margin:20px;\">\r\n        <el-button round @click=\"handleAddDependent()\" style=\"margin:20px;float:right\">ADD DEPENDENT</el-button>\r\n        <template>\r\n\r\n        </template>\r\n        <template>\r\n            <el-table :data=\"ruleForm.employee.dependentPersons\"\r\n                      style=\"width: 100%\">\r\n                <el-table-column type=\"index\"\r\n                                 :index=\"indexMethod\">\r\n                </el-table-column>\r\n                <el-table-column label=\"Photo\"\r\n                                 width=\"100\">\r\n                    <template slot-scope=\"scope\">\r\n                        <img :src=\"getImageFile(scope.row.person.photo)\" height=\"40\">\r\n                    </template>\r\n                </el-table-column>\r\n                <el-table-column label=\"Name\"\r\n                                 width=\"200\">\r\n\r\n                    <template slot-scope=\"scope\">\r\n                        <div slot=\"reference\" class=\"name-wrapper\" v-if=\"scope.row.person.middleName\">\r\n                            {{ scope.row.person.firstName+' '+scope.row.person.middleName+' '+scope.row.person.lastName }}\r\n                        </div>\r\n                        <div slot=\"reference\" class=\"name-wrapper\" v-if=\"!scope.row.person.middleName\">\r\n                            {{ scope.row.person.firstName+' '+scope.row.person.lastName }}\r\n                        </div>\r\n\r\n                    </template>\r\n                </el-table-column>\r\n                <el-table-column sortable\r\n                                 label=\"Gender\"\r\n                                 width=\"100\">\r\n                    <template slot-scope=\"scope\">\r\n                        <div slot=\"reference\" class=\"name-wrapper\" v-if=\"scope.row.person.gender\">\r\n                            <el-tag size=\"medium\">{{ scope.row.person.gender.name }}</el-tag>\r\n                        </div>\r\n                        <div slot=\"reference\" class=\"name-wrapper\" v-if=\"!scope.row.person.gender\">\r\n                            <el-tag size=\"medium\">Gender is missing</el-tag>\r\n                        </div>\r\n                    </template>\r\n                </el-table-column>\r\n                <el-table-column sortable\r\n                                 label=\"Relation\"\r\n                                 width=\"180\">\r\n                    <template slot-scope=\"scope\">\r\n                        {{ scope.row.relation.name }}\r\n                    </template>\r\n                </el-table-column>\r\n                <el-table-column label=\"Contact\"\r\n                                 width=\"100\">\r\n                    <template slot-scope=\"scope\">\r\n                        {{ scope.row.phone1 }}\r\n                    </template>\r\n                </el-table-column>\r\n\r\n                <el-table-column align=\"right\">\r\n\r\n                    <template slot-scope=\"scope\">\r\n\r\n                        <el-button size=\"mini\"\r\n                                   @click=\"handleEdit(scope.$index, scope.row)\">Edit</el-button>\r\n                        <el-button size=\"mini\"\r\n                                   type=\"danger\"\r\n                                   @click=\"handleDelete(scope.$index, scope.row)\">Delete</el-button>\r\n                    </template>\r\n                </el-table-column>\r\n            </el-table>\r\n            <div class=\"block\" style=\"text-align: center;\">\r\n                <span class=\"demonstration\"></span>\r\n                <el-pagination v-on:size-change=\"handleSizeChange\"\r\n                               v-on:current-change=\"handleCurrentChange\"\r\n                               :current-page.sync=\"ruleForm.dependentPersons.currentPage\"\r\n                               :page-sizes=\"[5,10, 20, 50, 100]\"\r\n                               :page-size=\"ruleForm.employee.dependentPersons.pageSize\"\r\n                               layout=\"total, sizes, prev, pager, next, jumper\"\r\n                               :total=\"ruleForm.employee.dependentPersons.rowCount\">\r\n                </el-pagination>\r\n            </div>\r\n        </template>\r\n    </section>\r\n</template>\r\n<script>\r\n     import { getCastList, getGenderList, getMaritalStatusList,getReligionsList,getLitracyList,\r\n    getHealthStatusList, getCountryList, getProvinceList, getDistrictList, getMunVdcList, getWardList } from '@/api/table';\r\n    import { addEmployee, deleteEmployee } from '@/api/employee';\r\n    import { getUserByPerson } from '@/api/user';\r\nimport { Script } from 'vm';\r\n    export default {\r\n        props:['ruleForm.employee.dependentPersons'],\r\n        data() {\r\n\r\n            return {\r\n                index: '',\r\n                ruleForm: {                    \r\n                    person: {\r\n                        id: null,\r\n                        firstName: '',\r\n                        middleName: '',\r\n                        lastName: '',\r\n                        dob: null,\r\n                        genderId: null,\r\n                        religionId: null,\r\n                        castId: null,\r\n                        email: '',\r\n                        phone1: '',\r\n                        phone2: '',\r\n                        permanentAddressId: '',\r\n                        permanentAddress: {\r\n                            id: null,\r\n                            addressTypeId: 1,\r\n                            countryId: null,\r\n                            provinceId: null,\r\n                            districtId: null,\r\n                            munVdcId: null,\r\n                            addressLine1: '',\r\n                            addressLine2: '',\r\n                            wardNo: null,\r\n                            pinCode: null,\r\n                            houseNo: null\r\n                        },\r\n                        temporaryAddressId: '',\r\n                        temporaryAddress: {\r\n                            id: null,\r\n                            addressTypeId: 2,\r\n                            countryId: null,\r\n                            provinceId: null,\r\n                            districtId: null,\r\n                            munVdcId: null,\r\n                            addressLine1: '',\r\n                            addressLine2: '',\r\n                            wardNo: null,\r\n                            pinCode: null,\r\n                            houseNo: null\r\n                        },\r\n                        maritalStatusId: null,\r\n                        healthStatusId: null,\r\n                        identityTypeId: null,\r\n                        identityNumber: null,\r\n                        identityIssueDate: null,\r\n                        identityIssuePlace: null,\r\n                        litracyId: null,\r\n                        educationId: null,\r\n                        eduInstitutionTypeId: null\r\n\r\n                    },\r\n                    religions: [],\r\n                    casts: [],\r\n                    addressTypes: [],\r\n                    countrys1: [],\r\n                    countrys2: [],\r\n                    provinces1: [],\r\n                    provinces2: [],\r\n                    districts1: [],\r\n                    districts2: [],\r\n                    munVdcs1: [],\r\n                    munVdcs2: [],\r\n                    wards1: [],\r\n                    wards2: [],\r\n                    maritalStatuses: [],\r\n                    identityTypes: [],\r\n                    litracys: [],\r\n                    educations: [],\r\n                    eduInstitutionTypes: [],\r\n\r\n                }\r\n            }\r\n        },\r\n            //created() {\r\n\r\n            //},\r\n            mounted() {\r\n                this.getGenders();\r\n                this.getMaritalStatus();\r\n                this.getReligions();\r\n                this.getCasts();\r\n                this.getLitracys();\r\n                this.getHealthStatuses();\r\n                this.getCountrys1();\r\n                this.getCountrys2();\r\n                this.getProvinces1();\r\n                this.getProvinces2();\r\n\r\n            },\r\n        methods: {\r\n            getCountrys1: function () {\r\n                return new Promise((resolve, reject) => {\r\n                    this.loading = true;\r\n                    getCountryList().then((res) => {\r\n                        this.countrys1 = res.result;\r\n                        this.loading = false;\r\n                        resolve()\r\n                    }).catch(error => {\r\n                        reject(error)\r\n                    })\r\n                })\r\n            },\r\n            getCountrys2: function () {\r\n                this.loading = true;\r\n                return new Promise((resolve, reject) => {\r\n                    getCountryList().then((res) => {\r\n                        this.countrys2 = res.result;\r\n                        this.loading = false;\r\n                        resolve()\r\n                    }).catch(error => {\r\n                        reject(error)\r\n                    })\r\n                })\r\n            },\r\n            getProvinces1: function () {\r\n                this.loading = true;\r\n                return new Promise((resolve, reject) => {\r\n                    getProvinceList().then((res) => {\r\n                        this.provinces1 = res.result;\r\n                        this.loading = false;\r\n                        resolve()\r\n                    }).catch(error => {\r\n                        reject(error)\r\n                    })\r\n                })\r\n            },\r\n            getProvinces2: function () {\r\n                this.loading = true;\r\n                return new Promise((resolve, reject) => {\r\n                    getProvinceList().then((res) => {\r\n                        this.provinces2 = res.result;\r\n                        this.loading = false;\r\n                        resolve()\r\n                    }).catch(error => {\r\n                        reject(error)\r\n                    })\r\n                })\r\n            },\r\n            getDistricts1: function (provinceId) {\r\n                this.loading = true;\r\n                return new Promise((resolve, reject) => {\r\n                    var params = { provinceId: provinceId }\r\n                    getDistrictList(params).then((res) => {\r\n                        this.districts1 = res.result;\r\n                        this.loading = false;\r\n                        resolve()\r\n                    }).catch(error => {\r\n                        reject(error)\r\n                    })\r\n                })\r\n            },\r\n            getDistricts2: function (provinceId) {\r\n                this.loading = true;\r\n                return new Promise((resolve, reject) => {\r\n                    var params = { provinceId: provinceId }\r\n                    getDistrictList(params).then((res) => {\r\n                        this.districts2 = res.result;\r\n                        this.loading = false;\r\n                        resolve()\r\n                    }).catch(error => {\r\n                        reject(error)\r\n                    })\r\n                })\r\n            },\r\n\r\n\r\n            getMunVdcs1: function (districtId) {\r\n                this.loading = true;\r\n                return new Promise((resolve, reject) => {\r\n                    var params = { districtId: districtId }\r\n                    getMunVdcList(params).then((res) => {\r\n                        this.munVdcs1 = res.result;\r\n                        this.loading = false;\r\n                        resolve()\r\n                    }).catch(error => {\r\n                        reject(error)\r\n                    })\r\n                })\r\n            },\r\n            getMunVdcs2: function (districtId) {\r\n                this.loading = true;\r\n                return new Promise((resolve, reject) => {\r\n                    var params = { districtId: districtId }\r\n                    getMunVdcList(params).then((res) => {\r\n                        this.munVdcs2 = res.result;\r\n                        this.loading = false;\r\n                        resolve()\r\n                    }).catch(error => {\r\n                        reject(error)\r\n                    })\r\n                })\r\n            },\r\n            getWards1: function (munVdcId) {\r\n                this.loading = true;\r\n                return new Promise((resolve, reject) => {\r\n                    var params = { munVdcId: munVdcId }\r\n                    getWardList(params).then((res) => {\r\n                        this.wards1 = res.result;\r\n                        this.loading = false;\r\n                        resolve()\r\n                    }).catch(error => {\r\n                        reject(error)\r\n                    })\r\n                })\r\n            },\r\n            getWards2: function (munVdcId) {\r\n                this.loading = true;\r\n                return new Promise((resolve, reject) => {\r\n                    var params = { munVdcId: munVdcId }\r\n                    getWardList(params).then((res) => {\r\n                        this.wards2 = res.result;\r\n                        this.loading = false;\r\n                        resolve()\r\n                    }).catch(error => {\r\n                        reject(error)\r\n                    })\r\n                })\r\n            },\r\n            getLitracys: function () {\r\n                this.loading = true;\r\n                return new Promise((resolve, reject) => {\r\n                    getLitracyList().then((res) => {\r\n                        this.litracys = res.result;\r\n                        this.loading = false;\r\n                        resolve()\r\n                    }).catch(error => {\r\n                        reject(error)\r\n                    })\r\n                })\r\n            },\r\n            getHealthStatuses: function () {\r\n                this.loading = true;\r\n                return new Promise((resolve, reject) => {\r\n                    getHealthStatusList().then((res) => {\r\n                        this.healthStatuses = res.result;\r\n                        this.loading = false;\r\n                        resolve()\r\n                    }).catch(error => {\r\n                        reject(error)\r\n                    })\r\n                })\r\n            },\r\n            getGenders: function () {\r\n                this.loading = true;\r\n                return new Promise((resolve, reject) => {\r\n                    getGenderList().then((res) => {\r\n                        this.genders = res.result;\r\n                        this.loading = false;\r\n                        resolve()\r\n                    }).catch(error => {\r\n                        reject(error)\r\n                    })\r\n                })\r\n            },\r\n            getCasts: function () {\r\n                this.loading = true;\r\n                return new Promise((resolve, reject) => {\r\n                    getCastList().then((res) => {\r\n                        this.casts = res.result;\r\n                        this.loading = false;\r\n                        resolve()\r\n                    }).catch(error => {\r\n                        reject(error)\r\n                    })\r\n                })\r\n            },\r\n            getMaritalStatus: function () {\r\n                this.loading = true;\r\n                return new Promise((resolve, reject) => {\r\n                    getMaritalStatusList().then((res) => {\r\n                        this.maritalStatuses = res.result;\r\n                        this.loading = false;\r\n                        resolve()\r\n                    }).catch(error => {\r\n                        reject(error)\r\n                    })\r\n                })\r\n            },\r\n            getReligions: function () {\r\n                this.loading = true;\r\n                return new Promise((resolve, reject) => {\r\n                    getReligionsList().then((res) => {\r\n                        this.religions = res.result;\r\n                        this.loading = false;\r\n                        resolve()\r\n                    }).catch(error => {\r\n                        reject(error)\r\n                    })\r\n                })\r\n            },\r\n            submitForm(formName) {\r\n                this.$refs[formName].validate((valid) => {\r\n                    if (valid) {\r\n                        this.loading = true;\r\n                        return new Promise((resolve, reject) => {\r\n                            var employeeParams = { Id: this.ruleForm.id, Name: this.ruleForm.name, UserName: this.ruleForm.username, Password: this.ruleForm.password, RoleId: this.ruleForm.roleId };\r\n                            editEmployee(employeeParams).then((res) => {\r\n                                this.$router.back();\r\n                                this.loading = false;\r\n                                resolve()\r\n                                this.$message({\r\n                                    type: 'success',\r\n                                    message: 'Employee Edit completed'\r\n                                })\r\n                            }).catch(error => {\r\n                                reject(error)\r\n                            })\r\n                        })\r\n                    } else {\r\n                        this.$message({\r\n                            type: 'info',\r\n                            message: 'Employee Edit Canceled'\r\n                        });\r\n                        return false;\r\n                    }\r\n                })\r\n            },\r\n            resetForm(formName) {\r\n                this.$router.back();\r\n                //this.$refs[formName].resetFields();\r\n            },\r\n            handleBack() {\r\n                this.$router.back();\r\n            }\r\n        }\r\n        \r\n    }\r\n</script>\r\n"]}]}