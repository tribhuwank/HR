{"remainingRequest":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Applicatons\\CloudHR\\CloudHR\\src\\views\\employee\\CreateEmployee.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\src\\views\\employee\\CreateEmployee.vue","mtime":1552018051336},{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getGenderList } from '@/api/table';\nimport { addEmployee, deleteEmployee } from '@/api/employee';\nimport CryptoJS from 'crypto-js'\nexport default {\n    data() {\n        return {\n\n            setLoginCredential: false,\n            ruleForm: {\n                imageUrl:'',\n                employee: {\n                    id: null,\n                employeeJob:{\n                        id:null,\n                        departmentId:null,\n                        postId:null,\n                        hiringDate:null,\n                        symbolNumber:'',\n                        probationPeriodFrom:null,\n                        probationPeriodTo:null,\n                        probationPermorfanceSummary:'',\n                        opinionSuggestion:''\n                     },\n                   person: {\n                        id: null,\n                        firstName: '',\n                        middleName: '',\n                        lastName: '',\n                        genderId: null,\n                        dob: null,\n                        photo: ''\n                     }\n\n                },\n                user: {\n                    id: null,\n                    name: '',\n                    userName: '',\n                    password: '',\n                    checkPass:'',\n                    rolId:2\n                }\n            },\n            genders: []\n\n        };\n    },\n    mounted() {\n        this.getGenders();\n    },\n    methods: {\n        handleAvatarSuccess(res, file) {\n            var self=this;\n            this.ruleForm.imageUrl = URL.createObjectURL(file.raw);\n                      var reader = new FileReader();\n            reader.readAsDataURL(file.raw);\n                 reader.onloadend = function() {\n                    var rss=reader.result;\n                     self.ruleForm.employee.person.photo = rss;\n            }\n\n\n\n        },\n        beforeAvatarUpload(file) {\n            const isJPG = file.type === 'image/jpeg';\n            const isLt2M = file.size / 1024 / 1024 < 2;\n\n            if (!isJPG) {\n                this.$message.error('Avatar picture must be JPG format!');\n            }\n            if (!isLt2M) {\n                this.$message.error('Avatar picture size can not exceed 2MB!');\n            }\n            return isJPG && isLt2M;\n        },\n        getGenders: function () {\n            this.loading = true;\n            return new Promise((resolve, reject) => {\n            getGenderList().then((res) => {\n                this.genders = res.result;\n                this.loading = false;\n               resolve();\n             }).catch(error => {\n                    reject(error)\n                })\n             })\n           },\n        submitForm(formName) {\n            this.$refs[formName].validate((valid) => {\n                if (valid) {\n                    this.loading = true;\n                        if(this.setLoginCredential)\n                        {\n                            this.ruleForm.user.name = this.ruleForm.employee.person.firstName.concat(' ',this.ruleForm.employee.person.middleName);\n                            this.ruleForm.user.name =this.ruleForm.user.name.concat(' ',this.ruleForm.employee.person.lastName);\n\n                            var key = CryptoJS.enc.Hex.parse('000102030405060708090a0b0c0d0e0f');\n                            var iv = CryptoJS.enc.Hex.parse('101112131415161718191a1b1c1d1e1f');\n                            var encrypted = CryptoJS.AES.encrypt(this.ruleForm.user.checkPass, key, { iv: iv }).toString();\n                           this.ruleForm.user.password=encrypted;\n                        }\n\n                    var employeeParams = {  EmployeeViewModel: this.ruleForm.employee, UserViewModel: this.ruleForm.user }\n                    return new Promise((resolve, reject) => {\n                       addEmployee(employeeParams).then((res) => {\n                            this.$message({\n                                type: 'success',\n                                message: 'Employee Add completed'\n                            })\n                            this.loading = false\n                            resolve()\n                            this.$router.back()\n                        }).catch(error => {\n                            reject(error)\n                        })\n                    })\n                   }\n                })\n          },\n\n        resetForm(formName) {\n            this.$refs[formName].resetFields();\n        },\n        handleBack() {\n            this.$router.back();\n        }\n    }\n\n}\n",{"version":3,"sources":["CreateEmployee.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"CreateEmployee.vue","sourceRoot":"src\\views\\employee","sourcesContent":["<template>\r\n    <section style=\"margin:20px;\">\r\n        <el-row>\r\n            <el-button round @click=\"handleBack()\" style=\"margin:20px;float:right\">BACK TO EMPLOYEES</el-button>\r\n        </el-row>\r\n        <el-form :model=\"ruleForm\" ref=\"ruleForm\" label-width=\"120px\">\r\n            <el-row>\r\n                <el-col :span=\"8\">\r\n                    <el-form-item label=\"First Name\" prop=\"employee.person.firstName\" placeholder=\"First Name\"\r\n                                  :rules=\"{ required: true, message: 'Please input First Name', trigger: 'blur' }\">\r\n                        <el-input v-model=\"ruleForm.employee.person.firstName\"></el-input>\r\n                    </el-form-item>\r\n                </el-col>\r\n                <el-col :span=\"8\">\r\n                    <el-form-item label=\"Middle Name\" prop=\"employee.person.middleName\" placeholder=\"Middle Name\">\r\n                        <el-input v-model=\"ruleForm.employee.person.middleName\"></el-input>\r\n                    </el-form-item>\r\n                </el-col>\r\n                <el-col :span=\"8\">\r\n                    <el-form-item label=\"Last Name\" prop=\"employee.person.lastName\" placeholder=\"Last Name\"\r\n                                  :rules=\"{ required: true, message: 'Please input Last Name', trigger: 'blur' }\">\r\n                        <el-input v-model=\"ruleForm.employee.person.lastName\"></el-input>\r\n                    </el-form-item>\r\n                </el-col>\r\n            </el-row>\r\n            <el-row>\r\n                <el-col :span=\"8\">\r\n                    <el-form-item label=\"Date of birth\" prop=\"employee.person.dob\" placeholder=\"Date of birth\"\r\n                                  :rules=\"{ type: 'date', required: true, message: 'Please Pick a date', trigger: 'change' }\">\r\n                        <el-date-picker v-model=\"ruleForm.employee.person.dob\"\r\n                                        type=\"date\"\r\n                                        placeholder=\"Pick a date\"\r\n                                        default-value=\"2001-01-01\">\r\n                        </el-date-picker>\r\n                    </el-form-item>\r\n\r\n\r\n                    <el-form-item label=\"Hiring Date\" prop=\"employee.employeeJob.hiringDate\" placeholder=\"Hiring Date\"\r\n                                  :rules=\"{ type: 'date', required: true, message: 'Please Pick a date', trigger: 'change' }\">\r\n                        <el-date-picker v-model=\"ruleForm.employee.employeeJob.hiringDate\"\r\n                                        type=\"date\"\r\n                                        placeholder=\"Pick a date\"\r\n                                        default-value=\"2001-01-01\">\r\n                        </el-date-picker>\r\n                    </el-form-item>\r\n                    <el-form-item label=\"Symbol Number\" prop=\"employee.employeeJob.symbolNumber\" placeholder=\"Symbol Number\"\r\n                                  :rules=\"{ required: true, message: 'Please input Employee Number', trigger: 'blur' }\">\r\n                        <el-input v-model=\"ruleForm.employee.employeeJob.symbolNumber\" autocomplete=\"off\"></el-input>\r\n                    </el-form-item>\r\n                </el-col>\r\n                <el-col :span=\"8\">\r\n                    <el-form-item label=\"Gender\" prop=\"employee.person.genderId\"\r\n                                  :rules=\"{ required: true, message: 'Please Select Gender', pattern: /.+/, trigger: 'change' }\">\r\n                        <el-select v-model=\"ruleForm.employee.person.genderId\" placeholder=\"Select Gender\">\r\n                            <el-option v-for=\"item in genders\"\r\n                                       :key=\"item.id\"\r\n                                       :label=\"item.name\"\r\n                                       :value=\"item.id\">\r\n                            </el-option>\r\n\r\n                        </el-select>\r\n                    </el-form-item>\r\n\r\n\r\n                </el-col>\r\n                <el-col :span=\"8\">\r\n                    <el-form-item label=\"Photograph\" prop=\"imageUrl\" placeholder=\"photo\"\r\n                                  :rules=\"{ required: true, message: 'Please Select an image', trigger: 'change' }\">\r\n                        <el-upload class=\"avatar-uploader\"\r\n                                   action=\"/api/account/posts/\"                                   \r\n                                   :show-file-list=\"false\"\r\n                                   :on-success=\"handleAvatarSuccess\"\r\n                                   :before-upload=\"beforeAvatarUpload\" \r\n                                   >\r\n                            <img v-if=\"ruleForm.imageUrl\" :src=\"ruleForm.imageUrl\" class=\"avatar\" >\r\n                            <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\r\n                        </el-upload>\r\n                    </el-form-item>\r\n                </el-col>\r\n            </el-row>\r\n            <el-row>\r\n                <el-col :span=\"8\">\r\n                    <el-checkbox v-model=\"setLoginCredential\" label=\"Set Login Credentials\" border></el-checkbox>\r\n                    <el-row v-if=\"setLoginCredential\">\r\n                        <el-form-item label=\"User Name\" prop=\"user.username\" placeholder=\"User Name\">\r\n                            <el-input v-model=\"ruleForm.user.username\"></el-input>\r\n                        </el-form-item>\r\n                        <el-form-item label=\"Password\" prop=\"user.password\" placeholder=\"Password\">\r\n                            <el-input type=\"password\" v-model=\"ruleForm.user.password\" autocomplete=\"off\"></el-input>\r\n                        </el-form-item>\r\n                        <el-form-item label=\"Confirm\" prop=\"user.checkPass\" placeholder=\"Confirm Password\">\r\n                            <el-input type=\"password\" v-model=\"ruleForm.user.checkPass\" autocomplete=\"off\"></el-input>\r\n                        </el-form-item>\r\n                    </el-row>\r\n                </el-col>\r\n            </el-row>\r\n            <el-form-item>\r\n                <el-button type=\"primary\" @click=\"submitForm('ruleForm')\">Create</el-button>\r\n                <el-button @click=\"resetForm('ruleForm')\">Reset</el-button>\r\n            </el-form-item>\r\n        </el-form>\r\n    </section>\r\n</template>\r\n<script>\r\n    import { getGenderList } from '@/api/table';\r\n    import { addEmployee, deleteEmployee } from '@/api/employee';\r\n    import CryptoJS from 'crypto-js'\r\n    export default {\r\n        data() {\r\n            return {\r\n\r\n                setLoginCredential: false,\r\n                ruleForm: {\r\n                    imageUrl:'',\r\n                    employee: {\r\n                        id: null,\r\n                    employeeJob:{\r\n                            id:null,\r\n                            departmentId:null,\r\n                            postId:null,\r\n                            hiringDate:null,\r\n                            symbolNumber:'',\r\n                            probationPeriodFrom:null,\r\n                            probationPeriodTo:null,\r\n                            probationPermorfanceSummary:'',\r\n                            opinionSuggestion:''\r\n                         },\r\n                       person: {\r\n                            id: null,\r\n                            firstName: '',\r\n                            middleName: '',\r\n                            lastName: '',\r\n                            genderId: null,\r\n                            dob: null,\r\n                            photo: ''\r\n                         }\r\n\r\n                    },\r\n                    user: {\r\n                        id: null,\r\n                        name: '',\r\n                        userName: '',\r\n                        password: '',\r\n                        checkPass:'',\r\n                        rolId:2\r\n                    }\r\n                },\r\n                genders: []\r\n\r\n            };\r\n        },\r\n        mounted() {\r\n            this.getGenders();\r\n        },\r\n        methods: {\r\n            handleAvatarSuccess(res, file) {\r\n                var self=this;\r\n                this.ruleForm.imageUrl = URL.createObjectURL(file.raw);\r\n                          var reader = new FileReader();\r\n                reader.readAsDataURL(file.raw);\r\n                     reader.onloadend = function() {\r\n                        var rss=reader.result;\r\n                         self.ruleForm.employee.person.photo = rss;\r\n                }\r\n\r\n\r\n\r\n            },\r\n            beforeAvatarUpload(file) {\r\n                const isJPG = file.type === 'image/jpeg';\r\n                const isLt2M = file.size / 1024 / 1024 < 2;\r\n\r\n                if (!isJPG) {\r\n                    this.$message.error('Avatar picture must be JPG format!');\r\n                }\r\n                if (!isLt2M) {\r\n                    this.$message.error('Avatar picture size can not exceed 2MB!');\r\n                }\r\n                return isJPG && isLt2M;\r\n            },\r\n            getGenders: function () {\r\n                this.loading = true;\r\n                return new Promise((resolve, reject) => {\r\n                getGenderList().then((res) => {\r\n                    this.genders = res.result;\r\n                    this.loading = false;\r\n                   resolve();\r\n                 }).catch(error => {\r\n                        reject(error)\r\n                    })\r\n                 })\r\n               },\r\n            submitForm(formName) {\r\n                this.$refs[formName].validate((valid) => {\r\n                    if (valid) {\r\n                        this.loading = true;\r\n                            if(this.setLoginCredential)\r\n                            {\r\n                                this.ruleForm.user.name = this.ruleForm.employee.person.firstName.concat(' ',this.ruleForm.employee.person.middleName);\r\n                                this.ruleForm.user.name =this.ruleForm.user.name.concat(' ',this.ruleForm.employee.person.lastName);\r\n\r\n                                var key = CryptoJS.enc.Hex.parse('000102030405060708090a0b0c0d0e0f');\r\n                                var iv = CryptoJS.enc.Hex.parse('101112131415161718191a1b1c1d1e1f');\r\n                                var encrypted = CryptoJS.AES.encrypt(this.ruleForm.user.checkPass, key, { iv: iv }).toString();\r\n                               this.ruleForm.user.password=encrypted;\r\n                            }\r\n\r\n                        var employeeParams = {  EmployeeViewModel: this.ruleForm.employee, UserViewModel: this.ruleForm.user }\r\n                        return new Promise((resolve, reject) => {\r\n                           addEmployee(employeeParams).then((res) => {\r\n                                this.$message({\r\n                                    type: 'success',\r\n                                    message: 'Employee Add completed'\r\n                                })\r\n                                this.loading = false\r\n                                resolve()\r\n                                this.$router.back()\r\n                            }).catch(error => {\r\n                                reject(error)\r\n                            })\r\n                        })\r\n                       }\r\n                    })\r\n              },\r\n\r\n            resetForm(formName) {\r\n                this.$refs[formName].resetFields();\r\n            },\r\n            handleBack() {\r\n                this.$router.back();\r\n            }\r\n        }\r\n\r\n    }\r\n</script>\r\n<style>\r\n    .avatar-uploader .el-upload {\r\n        border: 1px dashed #d9d9d9;\r\n        border-radius: 6px;\r\n        cursor: pointer;\r\n        position: relative;\r\n        overflow: hidden;\r\n    }\r\n\r\n        .avatar-uploader .el-upload:hover {\r\n            border-color: #409EFF;\r\n        }\r\n\r\n    .avatar-uploader-icon {\r\n        font-size: 28px;\r\n        color: #8c939d;\r\n        width: 178px;\r\n        height: 178px;\r\n        line-height: 178px;\r\n        text-align: center;\r\n    }\r\n\r\n    .avatar {\r\n        width: 178px;\r\n        height: 178px;\r\n        display: block;\r\n    }\r\n</style>\r\n"]}]}