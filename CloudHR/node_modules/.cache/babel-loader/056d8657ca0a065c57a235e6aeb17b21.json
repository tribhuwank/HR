{"remainingRequest":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\babel-loader\\lib\\index.js!E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Applicatons\\CloudHR\\CloudHR\\src\\views\\employee\\createEmployee.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\src\\views\\employee\\createEmployee.vue","mtime":1550499133626},{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Applicatons\\CloudHR\\CloudHR\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getEmployeeList } from '@/api/table';\nimport { deleteEmployee } from '@/api/user';\nimport CryptoJS from 'crypto-js';\nexport default {\n  data: function data() {\n    return {\n      setLoginCredential: false,\n      ruleForm: {\n        imageUrl: '',\n        employee: {\n          id: null,\n          employeeJob: {\n            id: null,\n            departmentId: null,\n            postId: null,\n            hiringDate: null,\n            symbolNumber: '',\n            probationPeriodFrom: null,\n            probationPeriodTo: null,\n            probationPermorfanceSummary: '',\n            opinionSuggestion: ''\n          },\n          person: {\n            id: null,\n            firstName: '',\n            middleName: '',\n            lastName: '',\n            genderId: null,\n            dob: null,\n            photo: ''\n          }\n        },\n        user: {\n          id: null,\n          name: '',\n          userName: '',\n          password: '',\n          checkPass: '',\n          rolId: 2\n        }\n      },\n      genders: []\n    };\n  },\n  mounted: function mounted() {\n    this.getGenders();\n  },\n  methods: {\n    handleAvatarSuccess: function handleAvatarSuccess(res, file) {\n      var self = this;\n      this.ruleForm.imageUrl = URL.createObjectURL(file.raw);\n      var reader = new FileReader();\n      reader.readAsDataURL(file.raw);\n\n      reader.onloadend = function () {\n        var rss = reader.result;\n        self.ruleForm.employee.person.photo = rss;\n      };\n    },\n    beforeAvatarUpload: function beforeAvatarUpload(file) {\n      var isJPG = file.type === 'image/jpeg';\n      var isLt2M = file.size / 1024 / 1024 < 2;\n\n      if (!isJPG) {\n        this.$message.error('Avatar picture must be JPG format!');\n      }\n\n      if (!isLt2M) {\n        this.$message.error('Avatar picture size can not exceed 2MB!');\n      }\n\n      return isJPG && isLt2M;\n    },\n    getGenders: function getGenders() {\n      var _this = this;\n\n      this.loading = true; //NProgress.start();\n\n      getGenderList().then(function (res) {\n        _this.genders = res.data.result;\n        _this.loading = false; //NProgress.done();\n      });\n    },\n    submitForm: function submitForm(formName) {\n      var _this2 = this;\n\n      this.$refs[formName].validate(function (valid) {\n        if (valid) {\n          _this2.loading = true; //NProgress.start();\n\n          if (_this2.setLoginCredential) {\n            _this2.ruleForm.user.name = _this2.ruleForm.employee.person.firstName.concat(' ', _this2.ruleForm.employee.person.middleName);\n            _this2.ruleForm.user.name = _this2.ruleForm.user.name.concat(' ', _this2.ruleForm.employee.person.lastName);\n            var key = CryptoJS.enc.Hex.parse('000102030405060708090a0b0c0d0e0f');\n            var iv = CryptoJS.enc.Hex.parse('101112131415161718191a1b1c1d1e1f');\n            var encrypted = CryptoJS.AES.encrypt(_this2.ruleForm.user.checkPass, key, {\n              iv: iv\n            }).toString();\n            _this2.ruleForm.user.password = encrypted;\n          }\n\n          var employeeParams = {\n            EmployeeViewModel: _this2.ruleForm.employee,\n            UserViewModel: _this2.ruleForm.user\n          };\n          addEmployee(employeeParams).then(function (res) {\n            _this2.$router.back(); // this.$router.push({ path: '/employee-edit', name: 'Employee-Edit', params: { row: res }, meta: { requiresAuth: true, adminAuth: true, operatorAuth: false } });\n\n\n            _this2.loading = false; //NProgress.done();\n\n            _this2.$message({\n              type: 'success',\n              message: 'Employee Add completed'\n            });\n          });\n        } else {\n          _this2.$message({\n            type: 'info',\n            message: 'Employee Add Canceled'\n          });\n\n          return false;\n        }\n      });\n    },\n    resetForm: function resetForm(formName) {\n      this.$refs[formName].resetFields();\n    },\n    handleBack: function handleBack() {\n      this.$router.back();\n    }\n  }\n};",{"version":3,"sources":["createEmployee.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <section style=\"margin:20px;\">\r\n        <el-row>\r\n            <el-button round @click=\"handleBack()\" style=\"margin:20px;float:right\">BACK TO EMPLOYEES</el-button>\r\n        </el-row>\r\n        <el-form :model=\"ruleForm\" ref=\"ruleForm\" label-width=\"120px\">\r\n            <el-row>\r\n                <el-col :span=\"8\">\r\n                    <el-form-item label=\"First Name\" prop=\"employee.person.firstName\" placeholder=\"First Name\"\r\n                                  :rules=\"{ required: true, message: 'Please input First Name', trigger: 'blur' }\">\r\n                        <el-input v-model=\"ruleForm.employee.person.firstName\"></el-input>\r\n                    </el-form-item>\r\n                </el-col>\r\n                <el-col :span=\"8\">\r\n                    <el-form-item label=\"Middle Name\" prop=\"employee.person.middleName\" placeholder=\"Middle Name\">\r\n                        <el-input v-model=\"ruleForm.employee.person.middleName\"></el-input>\r\n                    </el-form-item>\r\n                </el-col>\r\n                <el-col :span=\"8\">\r\n                    <el-form-item label=\"Last Name\" prop=\"employee.person.lastName\" placeholder=\"Last Name\"\r\n                                  :rules=\"{ required: true, message: 'Please input Last Name', trigger: 'blur' }\">\r\n                        <el-input v-model=\"ruleForm.employee.person.lastName\"></el-input>\r\n                    </el-form-item>\r\n                </el-col>\r\n            </el-row>\r\n            <el-row>\r\n                <el-col :span=\"8\">\r\n                    <el-form-item label=\"Date of birth\" prop=\"employee.person.dob\" placeholder=\"Date of birth\"\r\n                                  :rules=\"{ type: 'date', required: true, message: 'Please Pick a date', trigger: 'change' }\">\r\n                        <el-date-picker v-model=\"ruleForm.employee.person.dob\"\r\n                                        type=\"date\"\r\n                                        placeholder=\"Pick a date\"\r\n                                        default-value=\"2001-01-01\">\r\n                        </el-date-picker>\r\n                    </el-form-item>\r\n\r\n\r\n                    <el-form-item label=\"Hiring Date\" prop=\"employee.employeeJob.hiringDate\" placeholder=\"Hiring Date\"\r\n                                  :rules=\"{ type: 'date', required: true, message: 'Please Pick a date', trigger: 'change' }\">\r\n                        <el-date-picker v-model=\"ruleForm.employee.employeeJob.hiringDate\"\r\n                                        type=\"date\"\r\n                                        placeholder=\"Pick a date\"\r\n                                        default-value=\"2001-01-01\">\r\n                        </el-date-picker>\r\n                    </el-form-item>\r\n                    <el-form-item label=\"Symbol Number\" prop=\"employee.employeeJob.symbolNumber\" placeholder=\"Symbol Number\"\r\n                                  :rules=\"{ required: true, message: 'Please input Employee Number', trigger: 'blur' }\">\r\n                        <el-input v-model=\"ruleForm.employee.employeeJob.symbolNumber\" autocomplete=\"off\"></el-input>\r\n                    </el-form-item>\r\n                </el-col>\r\n                <el-col :span=\"8\">\r\n                    <el-form-item label=\"Gender\" prop=\"employee.person.genderId\"\r\n                                  :rules=\"{ required: true, message: 'Please Select Gender', pattern: /.+/, trigger: 'change' }\">\r\n                        <el-select v-model=\"ruleForm.employee.person.genderId\" placeholder=\"Select Gender\">\r\n                            <el-option v-for=\"item in genders\"\r\n                                       :key=\"item.id\"\r\n                                       :label=\"item.name\"\r\n                                       :value=\"item.id\">\r\n                            </el-option>\r\n\r\n                        </el-select>\r\n                    </el-form-item>\r\n\r\n\r\n                </el-col>\r\n                <el-col :span=\"8\">\r\n                    <el-form-item label=\"Photograph\" prop=\"imageUrl\" placeholder=\"photo\"\r\n                                  :rules=\"{ required: true, message: 'Please Select an image', trigger: 'change' }\">\r\n                        <el-upload class=\"avatar-uploader\"\r\n                                   action=\"https://jsonplaceholder.typicode.com/posts/\"                                   \r\n                                   :show-file-list=\"false\"\r\n                                   :on-success=\"handleAvatarSuccess\"\r\n                                   :before-upload=\"beforeAvatarUpload\" \r\n                                   >\r\n                            <img v-if=\"ruleForm.imageUrl\" :src=\"ruleForm.imageUrl\" class=\"avatar\" >\r\n                            <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\r\n                        </el-upload>\r\n                    </el-form-item>\r\n                </el-col>\r\n            </el-row>\r\n            <el-row>\r\n                <el-col :span=\"8\">\r\n                    <el-checkbox v-model=\"setLoginCredential\" label=\"Set Login Credentials\" border></el-checkbox>\r\n                    <el-row v-if=\"setLoginCredential\">\r\n                        <el-form-item label=\"User Name\" prop=\"user.username\" placeholder=\"User Name\">\r\n                            <el-input v-model=\"ruleForm.user.username\"></el-input>\r\n                        </el-form-item>\r\n                        <el-form-item label=\"Password\" prop=\"user.password\" placeholder=\"Password\">\r\n                            <el-input type=\"password\" v-model=\"ruleForm.user.password\" autocomplete=\"off\"></el-input>\r\n                        </el-form-item>\r\n                        <el-form-item label=\"Confirm\" prop=\"user.checkPass\" placeholder=\"Confirm Password\">\r\n                            <el-input type=\"password\" v-model=\"ruleForm.user.checkPass\" autocomplete=\"off\"></el-input>\r\n                        </el-form-item>\r\n                    </el-row>\r\n                </el-col>\r\n            </el-row>\r\n            <el-form-item>\r\n                <el-button type=\"primary\" @click=\"submitForm('ruleForm')\">Create</el-button>\r\n                <el-button @click=\"resetForm('ruleForm')\">Reset</el-button>\r\n            </el-form-item>\r\n        </el-form>\r\n    </section>\r\n</template>\r\n<script>\r\n    import { getEmployeeList } from '@/api/table';\r\n    import { deleteEmployee } from '@/api/user';\r\n    import CryptoJS from 'crypto-js'\r\n    export default {\r\n        data() {\r\n            return {\r\n\r\n                setLoginCredential: false,\r\n                ruleForm: {\r\n                    imageUrl:'',\r\n                    employee: {\r\n                        id: null,\r\n                    employeeJob:{\r\n                            id:null,\r\n                            departmentId:null,\r\n                            postId:null,\r\n                            hiringDate:null,\r\n                            symbolNumber:'',\r\n                            probationPeriodFrom:null,\r\n                            probationPeriodTo:null,\r\n                            probationPermorfanceSummary:'',\r\n                            opinionSuggestion:''\r\n                         },\r\n                       person: {\r\n                            id: null,\r\n                            firstName: '',\r\n                            middleName: '',\r\n                            lastName: '',\r\n                            genderId: null,\r\n                            dob: null,\r\n                            photo: ''\r\n                         }\r\n\r\n                    },\r\n                    user: {\r\n                        id: null,\r\n                        name: '',\r\n                        userName: '',\r\n                        password: '',\r\n                        checkPass:'',\r\n                        rolId:2\r\n                    }\r\n                },\r\n                genders: []\r\n\r\n            };\r\n        },\r\n        mounted() {\r\n            this.getGenders();\r\n        },\r\n        methods: {\r\n            handleAvatarSuccess(res, file) {\r\n                var self=this;\r\n                this.ruleForm.imageUrl = URL.createObjectURL(file.raw);\r\n                          var reader = new FileReader();\r\n                reader.readAsDataURL(file.raw);\r\n                     reader.onloadend = function() {\r\n                        var rss=reader.result;\r\n                         self.ruleForm.employee.person.photo = rss;\r\n                }\r\n\r\n\r\n\r\n            },\r\n            beforeAvatarUpload(file) {\r\n                const isJPG = file.type === 'image/jpeg';\r\n                const isLt2M = file.size / 1024 / 1024 < 2;\r\n\r\n                if (!isJPG) {\r\n                    this.$message.error('Avatar picture must be JPG format!');\r\n                }\r\n                if (!isLt2M) {\r\n                    this.$message.error('Avatar picture size can not exceed 2MB!');\r\n                }\r\n                return isJPG && isLt2M;\r\n            },\r\n            getGenders: function () {\r\n                this.loading = true;\r\n                //NProgress.start();\r\n                getGenderList().then((res) => {\r\n                    this.genders = res.data.result;\r\n                    this.loading = false;\r\n                    //NProgress.done();\r\n                });\r\n            },\r\n            submitForm(formName) {\r\n                this.$refs[formName].validate((valid) => {\r\n                    if (valid) {\r\n                        this.loading = true;\r\n                        //NProgress.start();\r\n                            if(this.setLoginCredential)\r\n                            {\r\n                                this.ruleForm.user.name = this.ruleForm.employee.person.firstName.concat(' ',this.ruleForm.employee.person.middleName);\r\n                                this.ruleForm.user.name =this.ruleForm.user.name.concat(' ',this.ruleForm.employee.person.lastName);\r\n\r\n                                var key = CryptoJS.enc.Hex.parse('000102030405060708090a0b0c0d0e0f');\r\n                                var iv = CryptoJS.enc.Hex.parse('101112131415161718191a1b1c1d1e1f');\r\n                                var encrypted = CryptoJS.AES.encrypt(this.ruleForm.user.checkPass, key, { iv: iv }).toString();\r\n                               this.ruleForm.user.password=encrypted;\r\n                            }\r\n\r\n                        var employeeParams = {  EmployeeViewModel: this.ruleForm.employee, UserViewModel: this.ruleForm.user }\r\n\r\n                        addEmployee(employeeParams).then((res) => {\r\n                            this.$router.back();\r\n                           // this.$router.push({ path: '/employee-edit', name: 'Employee-Edit', params: { row: res }, meta: { requiresAuth: true, adminAuth: true, operatorAuth: false } });\r\n                            this.loading = false;\r\n                            //NProgress.done();\r\n                            this.$message({\r\n                                type: 'success',\r\n                                message: 'Employee Add completed'\r\n                            });\r\n                        });\r\n                    } else {\r\n                        this.$message({\r\n                            type: 'info',\r\n                            message: 'Employee Add Canceled'\r\n                        });\r\n                        return false;\r\n                    }\r\n                });\r\n            },\r\n            resetForm(formName) {\r\n                this.$refs[formName].resetFields();\r\n            },\r\n            handleBack() {\r\n                this.$router.back();\r\n            }\r\n        }\r\n\r\n    }\r\n</script>\r\n<style>\r\n    .avatar-uploader .el-upload {\r\n        border: 1px dashed #d9d9d9;\r\n        border-radius: 6px;\r\n        cursor: pointer;\r\n        position: relative;\r\n        overflow: hidden;\r\n    }\r\n\r\n        .avatar-uploader .el-upload:hover {\r\n            border-color: #409EFF;\r\n        }\r\n\r\n    .avatar-uploader-icon {\r\n        font-size: 28px;\r\n        color: #8c939d;\r\n        width: 178px;\r\n        height: 178px;\r\n        line-height: 178px;\r\n        text-align: center;\r\n    }\r\n\r\n    .avatar {\r\n        width: 178px;\r\n        height: 178px;\r\n        display: block;\r\n    }\r\n</style>\r\n"],"sourceRoot":"src\\views\\employee"}]}